@page "/usuarios"
@inject HttpClient Http
@inject IJSRuntime JS

@using System.Text;           // Necesario para usar StringBuilder y Encoding
@using System.IO;             // Necesario para usar MemoryStream
@using Microsoft.JSInterop;   // Necesario para usar IJSRuntime y IJSObjectReference

<PageTitle>Usuarios</PageTitle>

<h2>👥 Lista de Usuarios</h2>

@if (usuarios == null)
{
    <p>Cargando usuarios...</p>
}
else if (usuarios.Count == 0)
{
    <p>No se encontraron usuarios.</p>
}
else
{
    <div style="margin-bottom: 20px;">
        <button @onclick="ExportarCSV">📄 Exportar CSV</button>
        <button @onclick="ExportarPDF">📑 Exportar PDF</button>
    </div>

    <table class="usuarios-table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Email</th>
                <th>Rol</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var usuario in usuarios)
            {
                <tr>
                    <td>@usuario.Nombre</td>
                    <td>@usuario.Email</td>
                    <td>@usuario.Rol</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Usuario> usuarios = new List<Usuario>(); // Aseguramos que la lista no sea null

    protected override async Task OnInitializedAsync()
    {
        try
        {
            usuarios = await Http.GetFromJsonAsync<List<Usuario>>("api/usuarios");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar usuarios: {ex.Message}");
        }
    }

    private async Task ExportarCSV()
    {
        var csv = new StringBuilder();
        csv.AppendLine("Nombre,Email,Rol");

        foreach (var u in usuarios)
            csv.AppendLine($"{u.Nombre},{u.Email},{u.Rol}");

        var bytes = Encoding.UTF8.GetBytes(csv.ToString());
        var fileName = $"usuarios_{DateTime.Now:yyyyMMddHHmmss}.csv";

        await using var stream = new MemoryStream(bytes); // Usar await using
        await using var fileRef = await JS.InvokeAsync<IJSObjectReference>("import", "./js/downloadFile.js");
        await fileRef.InvokeVoidAsync("downloadFile", fileName, "text/csv", Convert.ToBase64String(bytes));
    }

    private async Task ExportarPDF()
    {
        using var stream = new MemoryStream();
        var writer = new iText.Kernel.Pdf.PdfWriter(stream);
        var pdf = new iText.Kernel.Pdf.PdfDocument(writer);
        var doc = new iText.Layout.Document(pdf);

        doc.Add(new iText.Layout.Element.Paragraph("Listado de Usuarios")
            .SetBold().SetFontSize(18).SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));

        var table = new iText.Layout.Element.Table(3, true);
        table.AddHeaderCell("Nombre");
        table.AddHeaderCell("Email");
        table.AddHeaderCell("Rol");

        foreach (var u in usuarios)
        {
            table.AddCell(u.Nombre);
            table.AddCell(u.Email);
            table.AddCell(u.Rol);
        }

        doc.Add(table);
        doc.Close();

        var bytes = stream.ToArray();
        var fileName = $"usuarios_{DateTime.Now:yyyyMMddHHmmss}.pdf";

        await using var fileRef = await JS.InvokeAsync<IJSObjectReference>("import", "./js/downloadFile.js");
        await fileRef.InvokeVoidAsync("downloadFile", fileName, "application/pdf", Convert.ToBase64String(bytes));
    }
}
