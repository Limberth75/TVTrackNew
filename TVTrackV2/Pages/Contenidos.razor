@page "/contenidos"
@inject ApplicationDbContext Db
@inject IJSRuntime JS

@using System.Text
@using Microsoft.JSInterop
@using iText.Kernel.Pdf
@using iText.Layout
@using iText.Layout.Element
@using iText.Layout.Properties

<PageTitle>Contenidos</PageTitle>

<h2>📺 Lista de Contenidos</h2>

@if (contenidos == null)
{
    <p>Cargando contenidos...</p>
}
else if (contenidos.Count == 0)
{
    <p>No se encontraron contenidos.</p>
}
else
{
    <div style="margin-bottom: 20px;">
        <button @onclick="ExportarCSV">📄 Exportar CSV</button>
        <button @onclick="ExportarPDF">📑 Exportar PDF</button>
    </div>

    <table class="contenidos-table">
        <thead>
            <tr>
                <th>Título</th>
                <th>Categoría</th>
                <th>Plataforma</th>
                <th>Disponible</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contenido in contenidos)
            {
                <tr>
                    <td>@contenido.Titulo</td>
                    <td>@contenido.Categoria</td>
                    <td>@contenido.Plataforma</td>
                    <td>@(contenido.Disponible ? "Sí" : "No")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Contenido>? contenidos;

    protected override async Task OnInitializedAsync()
    {
        contenidos = await Db.Contenidos
            .OrderBy(c => c.Titulo)
            .ToListAsync();
    }

    private async Task ExportarCSV()
    {
        var csv = new StringBuilder();
        csv.AppendLine("Título,Categoría,Plataforma,Disponible");

        foreach (var c in contenidos!)
            csv.AppendLine($"{c.Titulo},{c.Categoria},{c.Plataforma},{(c.Disponible ? "Sí" : "No")}");

        var bytes = Encoding.UTF8.GetBytes(csv.ToString());
        var fileName = $"contenidos_{DateTime.Now:yyyyMMddHHmmss}.csv";

        await using var stream = new MemoryStream(bytes);
        var fileRef = await JS.InvokeAsync<IJSObjectReference>("import", "./downloadFile.js");
        await fileRef.InvokeVoidAsync("downloadFile", fileName, "text/csv", Convert.ToBase64String(bytes));
    }

    private async Task ExportarPDF()
    {
        using var stream = new MemoryStream();
        var writer = new PdfWriter(stream);
        var pdf = new PdfDocument(writer);
        var doc = new Document(pdf);

        doc.Add(new Paragraph("Listado de Contenidos")
            .SetBold().SetFontSize(18).SetTextAlignment(TextAlignment.CENTER));

        var table = new Table(4, true);
        table.AddHeaderCell("Título");
        table.AddHeaderCell("Categoría");
        table.AddHeaderCell("Plataforma");
        table.AddHeaderCell("Disponible");

        foreach (var c in contenidos!)
        {
            table.AddCell(c.Titulo);
            table.AddCell(c.Categoria);
            table.AddCell(c.Plataforma);
            table.AddCell(c.Disponible ? "Sí" : "No");
        }

        doc.Add(table);
        doc.Close();

        var bytes = stream.ToArray();
        var fileName = $"contenidos_{DateTime.Now:yyyyMMddHHmmss}.pdf";

        var fileRef = await JS.InvokeAsync<IJSObjectReference>("import", "./downloadFile.js");
        await fileRef.InvokeVoidAsync("downloadFile", fileName, "application/pdf", Convert.ToBase64String(bytes));
    }
}

<style>
    .contenidos-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .contenidos-table th, .contenidos-table td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: left;
        }

        .contenidos-table th {
            background-color: #3498db;
            color: white;
        }

        .contenidos-table tr:nth-child(even) {
            background-color: #f2f2f2;
        }
</style>
